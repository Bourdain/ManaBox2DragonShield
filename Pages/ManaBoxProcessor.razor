@using Mana2DragonShield.DataObjects
@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime

@page "/manaboxprocessor"



<style>

    .App-form {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        font-family: Arial, sans-serif;
    }

        .App-form input,
        .App-form select,
        .App-form button {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 16px;
        }

            .App-form input:focus,
            .App-form select:focus {
                border-color: #007bff;
                outline: none;
                box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
            }

        .App-form button {
            background-color: #007bff;
            color: #fff;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .App-form button:hover {
                background-color: #0056b3;
            }

    .file-label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }
</style>

<form class="App-form">

    <InputFile class="App-form" OnChange="HandleFileSelected" accept=".txt" />
    <br />

    <InputText class="App-form" Placeholder="Folder Name" @bind-Value="FolderName" />
    <br />

    <InputSelect class="App-form" @bind-Value="CardCondition">
        <option value="" disabled>Card Condition</option>
        <option value="Mint">Mint</option>
        <option value="NearMint">Near Mint</option>
        <option value="Excelent">Excelent</option>
        <option value="Good">Good</option>
        <option value="LightPlayed">Lightly Played</option>
        <option value="Played">Played</option>
        <option value="Poor">Poor</option>
    </InputSelect>

    <br />
    <InputSelect class="App-form" @bind-Value="CardLanguage">
        <option value="" disabled>Card Language</option>
        <option value="English">English</option>
        <option value="Spanish">Spanish</option>
        <option value="French">French</option>
        <option value="German">German</option>
        <option value="Italian">Italian</option>
        <option value="Portuguese">Portuguese</option>
        <option value="Japanese">Japanese</option>
        <option value="Chinese">Chinese</option>
    </InputSelect>

    <br />
    <InputDate class="App-form" @bind-Value="DateBought" />


    <br />
    <button class="App-form" @onclick="OnSubmit">Submit</button>
</form>

@code {
    string CardLanguage { get; set; } = "English";
    string CardCondition { get; set; } = "NearMint";
    string FolderName { get; set; } = "";
    DateTime? DateBought { get; set; } = DateTime.UtcNow.Date;
    IBrowserFile? UploadedFile { get; set; }
    string FileContents { get; set; }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        // Access the uploaded file
        UploadedFile = e.File;

        // Read the file contents into the string FileContents
        using var stream = UploadedFile.OpenReadStream();
        using var reader = new StreamReader(stream);
        FileContents = await reader.ReadToEndAsync();

#if DEBUG
       // Example: Print file details
       Console.WriteLine($"File Name: {UploadedFile.Name}");
       Console.WriteLine($"File Size: {UploadedFile.Size} bytes");
       Console.WriteLine($"Content Type: {UploadedFile.ContentType}");
       Console.WriteLine($"File Contents: {FileContents}");
#endif
        FolderName = UploadedFile.Name.Replace(".txt", "");
    }

    private void OnSubmit()
    {
#if DEBUG
       Console.WriteLine(CardLanguage);
       Console.WriteLine(CardCondition);
       Console.WriteLine(FolderName);
       Console.WriteLine(DateBought);
#endif

        List<ManaboxCsvDTO> dto = new();

        foreach (var item in FileContents.Split(Environment.NewLine))
        {
            if (string.IsNullOrWhiteSpace(item))
                continue;

            var toAdd = new ManaboxCsvDTO();

            var splitBySpaces = item.Split(" ");
            if (splitBySpaces.Length > 1)
            {
                toAdd.Quantity = splitBySpaces[0].Trim();
            }

            var idx1 = item.IndexOf(' ');
            var idx2 = item.IndexOf('(');

            toAdd.CardName = item.Substring(idx1 + 1, (idx2 - idx1) - 1).Trim();

            var idx3 = item.IndexOf(')');

            toAdd.SetCode = item.Substring(idx2, idx3 - idx2).Trim();
            toAdd.SetCode = toAdd.SetCode.Replace("(", "");


            var cardNumber = item.Substring(idx3 + 1, item.Length - idx3 - 1).Trim();
            var cardNumberSplit = cardNumber.Split(" ");

            toAdd.CardNumber = cardNumberSplit[0].Trim();

            toAdd.Printing = cardNumber.Contains("*F*") ? "Foil" : "Normal";

            toAdd.Language = CardLanguage;
            toAdd.Condition = CardCondition;
            toAdd.DateBought = DateBought.HasValue ? DateBought.Value.ToString("dd/MM/yyyy") : "01/01/2000";
            toAdd.FolderName = FolderName;
            toAdd.TradeQuantity = "0";
            dto.Add(toAdd);
        }

        // Convert dto to CSV format
        var csvBuilder = new System.Text.StringBuilder();
        csvBuilder.AppendLine("Folder Name,Quantity,Trade Quantity,Card Name,Set Code,Set Name,Card Number,Condition,Printing,Language,Price Bought,Date Bought");

        foreach (var entry in dto)
        {
            csvBuilder.AppendLine($"{FolderName},{entry.Quantity},{entry.TradeQuantity},\"{entry.CardName}\",{entry.SetCode},,{entry.CardNumber},{entry.Condition},{entry.Printing},{entry.Language},0,{entry.DateBought}");
        }

        var csvContent = csvBuilder.ToString();
#if DEBUG
    Console.WriteLine(csvContent);
#endif
        // Create a temporary file and download it
        var fileName = "DRGSHLD.csv";
        var fileBytes = System.Text.Encoding.UTF8.GetBytes(csvContent);

        // Use JSRuntime to trigger file download
        JSRuntime.InvokeVoidAsync("BlazorDownloadFile", fileName, fileBytes);

    }

}

<script>

    window.BlazorDownloadFile = (fileName, content) => {
        const blob = new Blob([content], { type: 'text/csv' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = fileName;
        link.click();
        URL.revokeObjectURL(link.href);
    };
</script>
